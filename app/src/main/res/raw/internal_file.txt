Grouping Resource Types

You should place each type of resource in a specific subdirectory of your project's res/ directory. For example, here's the file hierarchy for a simple project:

MyProject/
    src/  
        MyActivity.java  
    res/
        drawable/  
            icon.png  
        layout/  
            main.xml
            info.xml
        values/  
            strings.xml  

As you can see in this example, the res/ directory contains all the resources (in subdirectories): an image resource, two layout resources, and a string resource file. The resource directory names are important and are described in table 1.

Table 1. Resource directories supported inside project res/ directory.
Directory 	Resource Type
anim/ 	XML files that define tween animations. See Animation Resources.
color/ 	XML files that define a state list of colors. See Color State List Resource
drawable/ 	

Bitmap files (.png, .9.png, .jpg, .gif) or XML files that are compiled into the following drawable resource subtypes:

    * Bitmap files
    * Nine-Patches (re-sizable bitmaps)
    * State lists
    * Shapes
    * Animation drawables
    * Other drawables

See Drawable Resources.
layout/ 	XML files that define a user interface layout. See Layout Resource.
menu/ 	XML files that define application menus, such as an Options Menu, Context Menu, or Sub Menu. See Menu Resource.
raw/ 	

Arbitrary files to save in their raw form. To open these resources with a raw InputStream, call Resources.openRawResource() with the resource ID, which is R.raw.filename.

However, if you need access to original file names and file hierarchy, you might consider saving some resources in the assets/ directory (instead of res/raw/). Files in assets/ are not given a resource ID, so you can read them only using AssetManager.
values/ 	

XML files that contain simple values, such as strings, integers, and colors.

Whereas XML resource files in other res/ subdirectories define a single resource based on the XML filename, files in the values/ directory describe multiple resources. For a file in this directory, each child of the <resources> element defines a single resource. For example, a <string> element creates an R.string resource and a <color> element creates an R.color resource.

Because each resource is defined with its own XML element, you can name the file whatever you want and place different resource types in one file. However, for clarity, you might want to place unique resource types in different files. For example, here are some filename conventions for resources you can create in this directory:

    * arrays.xml for resource arrays (typed arrays).
    * colors.xml for color values
    * dimens.xml for dimension values.
    * strings.xml for string values.
    * styles.xml for styles.

See String Resources, Style Resource, and More Resource Types.
xml/ 	Arbitrary XML files that can be read at runtime by calling Resources.getXML(). Various XML configuration files must be saved here, such as a searchable configuration.

Caution: Never save resource files directly inside the res/ directory—it will cause a compiler error.

For more information about certain types of resources, see the Resource Types documentation.

The resources that you save in the subdirectories defined in table 1 are your "default" resources. That is, these resources define the default design and content for your application. However, different types of Android-powered devices might call for different types of resources. For example, if a device has a larger than normal screen, then you should provide different layout resources that take advantage of the extra screen space. Or, if a device has a different language setting, then you should provide different string resources that translate the text in your user interface. To provide these different resources for different device configurations, you need to provide alternative resources, in addition to your default resources.